# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013, Russell Keith-Magee
# This file is distributed under the same license as the BeeWare package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: BeeWare 0.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-26 20:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../tutorial/tutorial-2.rst:3
msgid "Tutorial 2 - Making it interesting"
msgstr ""

#: ../../tutorial/tutorial-2.rst:5
msgid ""
"In :doc:`Tutorial 1 <tutorial-1>`, we generated a stub project that was "
"able to run, but we didn't write any code ourselves. Let's take a look at"
" what was generated for us."
msgstr ""

#: ../../tutorial/tutorial-2.rst:10
msgid "What was generated"
msgstr ""

#: ../../tutorial/tutorial-2.rst:12
msgid ""
"In the ``src/helloworld`` directory, you should see 3 files: "
"``__init__.py``, ``__main__.py`` and ``app.py``."
msgstr ""

#: ../../tutorial/tutorial-2.rst:15
msgid ""
"``__init__.py`` marks the ``helloworld`` directory as an importable "
"Python module. It is an empty file; the very fact it exists tells the "
"Python interpreter that the ``helloworld`` directory defines a module."
msgstr ""

#: ../../tutorial/tutorial-2.rst:19
msgid ""
"``__main__.py`` marks the ``helloworld`` module as a special kind of "
"module - an executable module. If you try to run the ``helloworld`` "
"module using ``python -m helloworld``, the ``__main__.py`` file is where "
"Python will start executing. The contents of ``__main__.py`` is "
"relatively simple::"
msgstr ""

#: ../../tutorial/tutorial-2.rst:29
msgid ""
"That is - it imports the ``main`` method from the helloworld app; and if "
"it's being executed as an entry point, calls the main() method, and "
"starts the application's main loop. The main loop is the way a GUI "
"application listens for user input (like mouse clicks and keyboard "
"presses)."
msgstr ""

#: ../../tutorial/tutorial-2.rst:34
msgid ""
"The more interesting file is ``app.py`` - this contains the logic that "
"creates our application window::"
msgstr ""

#: ../../tutorial/tutorial-2.rst:52
msgid "Let's go through this line by line::"
msgstr ""

#: ../../tutorial/tutorial-2.rst:58
msgid ""
"First, we import the ``toga`` widget toolkit, as well as some style-"
"related utility classes and constants. Our code doesn't use these yet - "
"but we'll make use of them shortly."
msgstr ""

#: ../../tutorial/tutorial-2.rst:62
msgid "Then, we define a class::"
msgstr ""

#: ../../tutorial/tutorial-2.rst:66
msgid ""
"Each Toga application has a single ``toga.App`` instance, representing "
"the running entity that is the application. The app may end up managing "
"multiple windows; but for simple applications, there will be a single "
"main window."
msgstr ""

#: ../../tutorial/tutorial-2.rst:70
msgid "Next, we define a ``startup()`` method::"
msgstr ""

#: ../../tutorial/tutorial-2.rst:75
msgid ""
"The first thing the startup method does is to define a main box. Toga's "
"layout scheme behaves similar to HTML. You build an application by "
"constructing a collection of boxes, each of which contains other boxes, "
"or actual widgets. You then apply styles to these boxes to define how "
"they will consume the available window space."
msgstr ""

#: ../../tutorial/tutorial-2.rst:81
msgid ""
"In this application, we define a single box, but we don't put anything "
"into it."
msgstr ""

#: ../../tutorial/tutorial-2.rst:83
msgid "Next, we define a window into which we can put this empty box::"
msgstr ""

#: ../../tutorial/tutorial-2.rst:87
msgid ""
"This creates an instance of a ``toga.MainWindow``, which will have a "
"title matching the application's name. A Main Window is a special kind of"
" window in Toga - it's a window that is closely bound to the lifecycle of"
" the app. When the Main Window is closed, the application exits. The Main"
" Window is also the window that has the application's menu (if you're on "
"a platform like Windows where menu bars are part of the window)"
msgstr ""

#: ../../tutorial/tutorial-2.rst:94
msgid ""
"We then add our empty box as the content of the main window, and instruct"
" the application to show our window::"
msgstr ""

#: ../../tutorial/tutorial-2.rst:100
msgid ""
"Last of all, we define a ``main()`` method. This is what creates the "
"instance of our application::"
msgstr ""

#: ../../tutorial/tutorial-2.rst:106
msgid ""
"This ``main()`` method is the one that is imported and invoked by "
"``__main__.py``. It creates and returns an instance of our ``HelloWorld``"
" application."
msgstr ""

#: ../../tutorial/tutorial-2.rst:110
msgid ""
"That's the simplest possible Toga application. Let's put some of our own "
"content into the application, and make the app do something interesting."
msgstr ""

#: ../../tutorial/tutorial-2.rst:114
msgid "Adding some content of our own"
msgstr ""

#: ../../tutorial/tutorial-2.rst:116
msgid ""
"Modify your ``HelloWorld`` class inside ``src/helloworld/app.py`` so that"
" it looks like this::"
msgstr ""

#: ../../tutorial/tutorial-2.rst:151
msgid ""
"Don't remove the imports at the top of the file , or the ``main()`` at "
"the bottom. You only need to update the ``HelloWorld`` class."
msgstr ""

#: ../../tutorial/tutorial-2.rst:154
msgid "Let's look in detail at what has changed."
msgstr ""

#: ../../tutorial/tutorial-2.rst:156
msgid "We're still creating a main box; however, we are now applying a style::"
msgstr ""

#: ../../tutorial/tutorial-2.rst:160
msgid ""
"Toga's builtin layout system is called \"Pack\". It behaves a lot like "
"CSS. You define objects in a hierarchy - in HTML, the objects are "
"``<div>``, ``<span>``, and other DOM elements; in Toga, they're widgets "
"and boxes. You can then assign styles to the individual elements. In this"
" case, we're indicating that this is a ``COLUMN`` box - that is, it is a "
"box that will consume all the available width, and will expand its height"
" as content is added, but it will try to be as short as possible."
msgstr ""

#: ../../tutorial/tutorial-2.rst:168
msgid "Next, we define a couple of widgets::"
msgstr ""

#: ../../tutorial/tutorial-2.rst:176
msgid ""
"Here, we define a Label and a TextInput. Both widgets have styles "
"associated with them; the label will have 5px of padding on its left and "
"right, and no padding on the top and bottom. The TextInput is marked as "
"being flexible - that is, it will absorb all available space in its "
"layout axis."
msgstr ""

#: ../../tutorial/tutorial-2.rst:181
msgid ""
"The TextInput is assigned as an instance variable of the class. This "
"gives us easy access to the widget instance - something that we'll use in"
" a moment."
msgstr ""

#: ../../tutorial/tutorial-2.rst:184
msgid "Next, we define a box to hold these two widgets::"
msgstr ""

#: ../../tutorial/tutorial-2.rst:190
msgid ""
"The ``name_box`` is a box just like the main box; however, this time, "
"it's a ``ROW`` box. That means content will be added horizontally, and it"
" will try to make its width as narrow as possible. The box also has some "
"padding - 5px on all sides."
msgstr ""

#: ../../tutorial/tutorial-2.rst:195
msgid "Now we define a button::"
msgstr ""

#: ../../tutorial/tutorial-2.rst:203
msgid ""
"The button also has 5px of padding on all sides. We also define a "
"*handler* - a method to invoke when the button is pressed."
msgstr ""

#: ../../tutorial/tutorial-2.rst:206
msgid "Then, we add the name box and the button to the main box::"
msgstr ""

#: ../../tutorial/tutorial-2.rst:211
msgid ""
"This completes our layout; the rest of the startup method is as it was "
"previously - defining a MainWindow, and assigning the main box as the "
"window's content::"
msgstr ""

#: ../../tutorial/tutorial-2.rst:219
msgid ""
"The last thing we need to do is define the handler for the button. A "
"handler can be any method, generator, or asynchronous co-routine; it "
"accepts the widget that generated the event as an argument, and will be "
"invoked whenever the button is pressed::"
msgstr ""

#: ../../tutorial/tutorial-2.rst:227
msgid ""
"The body of the method is a simple print statement - however, it will "
"interrogate the current value of the name input, and use that content as "
"the text that is printed."
msgstr ""

#: ../../tutorial/tutorial-2.rst:231
msgid ""
"Now that we've made these changes we can see what they look like by "
"starting the application again. As before, we'll use Developer mode:"
msgstr ""

#: ../../tutorial/tutorial-2.rst:236 ../../tutorial/tutorial-2.rst:270
msgid "macOS"
msgstr ""

#: ../../tutorial/tutorial-2.rst:244 ../../tutorial/tutorial-2.rst:275
msgid "Linux"
msgstr ""

#: ../../tutorial/tutorial-2.rst:252 ../../tutorial/tutorial-2.rst:280
msgid "Windows"
msgstr ""

#: ../../tutorial/tutorial-2.rst:260
msgid ""
"You'll notice that this time, it *doesn't* install dependencies. "
"Briefcase can detect that the application has been run before, and to "
"save time, will only run the application. If you add new dependencies to "
"your app, you can make sure that they're installed by passing in a ``-d``"
" option when you run ``briefcase dev``."
msgstr ""

#: ../../tutorial/tutorial-2.rst:266
msgid "This should open a GUI window:"
msgstr ""

#: ../../tutorial/tutorial-2.rst
msgid "Hello World Tutorial 2 window, on macOS"
msgstr ""

#: ../../tutorial/tutorial-2.rst
msgid "Hello World Tutorial 2 window, on Linux"
msgstr ""

#: ../../tutorial/tutorial-2.rst
msgid "Hello World Tutorial 2 window, on Windows"
msgstr ""

#: ../../tutorial/tutorial-2.rst:285
msgid ""
"If you enter a name in the text box, and press the GUI button, you should"
" see output appear in the console where you started the application."
msgstr ""

#: ../../tutorial/tutorial-2.rst:289
msgid "Next steps"
msgstr ""

#: ../../tutorial/tutorial-2.rst:291
msgid ""
"We've now got an application that does something a little more "
"interesting. But it only runs on our own computer. Let's package this "
"application for distribution. In :doc:`Tutorial 3 <tutorial-3>`, we'll "
"wrap our application up as a standalone installer that we could send to a"
" friend, a customer, or upload to an App Store."
msgstr ""

