# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013, Russell Keith-Magee
# This file is distributed under the same license as the BeeWare package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: BeeWare 0.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-26 20:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../tutorial/tutorial-4.rst:3
msgid "Tutorial 4 - Updating your application"
msgstr ""

#: ../../tutorial/tutorial-4.rst:5
msgid ""
"In the last tutorial, we packaged our application as a native "
"application. If you're dealing with a real-world app, that isn't going to"
" be the end of the story - you'll likely do some testing, discover "
"problems, and need to make some changes. Even if your application is "
"perfect, you'll eventually want to publish version 2 of your application "
"with improvements."
msgstr ""

#: ../../tutorial/tutorial-4.rst:11
msgid "So - how do you update your installed app when you make code changes?"
msgstr ""

#: ../../tutorial/tutorial-4.rst:14
msgid "Updating application code"
msgstr ""

#: ../../tutorial/tutorial-4.rst:16
msgid ""
"Our application currently prints to the console when you press the "
"button. However, GUI applications shouldn't really use the console for "
"output. They need to use dialogs to communicate with users."
msgstr ""

#: ../../tutorial/tutorial-4.rst:20
msgid ""
"Let's add a dialog box to say hello, instead of writing to the console. "
"Modify the `say_hello` callback so it looks like this::"
msgstr ""

#: ../../tutorial/tutorial-4.rst:29
msgid "This directs Toga to open a modal dialog box when the button is pressed."
msgstr ""

#: ../../tutorial/tutorial-4.rst:31
msgid ""
"If you run ``briefcase dev``, enter a name, and press the button, you'll "
"see the new dialog box:"
msgstr ""

#: ../../tutorial/tutorial-4.rst:36 ../../tutorial/tutorial-4.rst:67
#: ../../tutorial/tutorial-4.rst:140
msgid "macOS"
msgstr ""

#: ../../tutorial/tutorial-4.rst
msgid "Hello World Tutorial 4 dialog, on macOS"
msgstr ""

#: ../../tutorial/tutorial-4.rst:41 ../../tutorial/tutorial-4.rst:78
#: ../../tutorial/tutorial-4.rst:153
msgid "Linux"
msgstr ""

#: ../../tutorial/tutorial-4.rst
msgid "Hello World Tutorial 4 dialog, on Linux"
msgstr ""

#: ../../tutorial/tutorial-4.rst:46 ../../tutorial/tutorial-4.rst:89
#: ../../tutorial/tutorial-4.rst:170
msgid "Windows"
msgstr ""

#: ../../tutorial/tutorial-4.rst
msgid "Hello World Tutorial 4 dialog, on Windows"
msgstr ""

#: ../../tutorial/tutorial-4.rst:51
msgid "However, if you run ``briefcase run``, the dialog box won't appear."
msgstr ""

#: ../../tutorial/tutorial-4.rst:53
msgid ""
"Why is this? Well, ``briefcase dev`` operates by running your code in "
"place - it tries to produce as realistic runtime environment for your "
"code as possible, but it doesn't provide or use any of the platform "
"infrastructure for wrapping your code as an application. Part of the "
"process of packaging your app involves copying your code *into* the "
"application bundle - and at the moment, your application still has the "
"old code in it."
msgstr ""

#: ../../tutorial/tutorial-4.rst:60
msgid ""
"So - we need to tell briefcase to copy over the new version of the code. "
"We *could* do this by deleting the old platform directory and starting "
"from scratch. However, Briefcase provides an easier way - you can update "
"the code for your existing bundled application:"
msgstr ""

#: ../../tutorial/tutorial-4.rst:100
msgid ""
"If Briefcase can't find the scaffolded template, it will automatically "
"invoke `create` to generate a fresh scaffold."
msgstr ""

#: ../../tutorial/tutorial-4.rst:103
msgid ""
"Now that we've updated the installer code, we can then run ``briefcase "
"build`` to re-compiled app, ``briefcase run`` to run the updated app, and"
" ``briefcase package`` to repackage the application for distribution."
msgstr ""

#: ../../tutorial/tutorial-4.rst:107
msgid ""
"(macOS users, remember that as noted in :doc:`Tutorial 3 <tutorial-3>`, "
"for the tutorial we recommend running ``briefcase package`` with the "
"``--no-sign`` flag to avoid the complexity of setting up a code signing "
"identity and keep the tutorial as simple as possible.)"
msgstr ""

#: ../../tutorial/tutorial-4.rst:113
msgid "Update and run in one step"
msgstr ""

#: ../../tutorial/tutorial-4.rst:115
msgid ""
"If you're rapidly iterating code changes, you'll likely want to make a "
"code change, update the application, and immediately re-run your "
"application. Briefcase has a shortcut to support this usage pattern - the"
" ``-u`` (or ``--update``) option on the ``run`` command."
msgstr ""

#: ../../tutorial/tutorial-4.rst:120
msgid ""
"Let's try making another change. You may have noticed that if you don't "
"type a name in the text input box, the dialog will say \"Hello, \". Let's"
" modify the ``say_hello`` function again to handle this edge case::"
msgstr ""

#: ../../tutorial/tutorial-4.rst:135
msgid ""
"Run your app in development mode (with ``briefcase dev``) to confirm that"
" the new logic works; then update, build and run the app with one "
"command:"
msgstr ""

#: ../../tutorial/tutorial-4.rst:183
msgid ""
"This should only be required if you're testing something about how your "
"application runs as a native binary, or hunting a bug that only manifests"
" when your application is in packaged form. For most day-to-day "
"development, ``briefcase dev`` will be a lot faster."
msgstr ""

#: ../../tutorial/tutorial-4.rst:188
msgid ""
"The package command also accepts the ``-u`` argument, so if you make a "
"change to your application code and want to repackage immediately, you "
"can run ``briefcase package -u``."
msgstr ""

#: ../../tutorial/tutorial-4.rst:193
msgid "Next steps"
msgstr ""

#: ../../tutorial/tutorial-4.rst:195
msgid ""
"We now have our application packaged for distribution on desktop "
"platforms, and we've been able to update the code in our application."
msgstr ""

#: ../../tutorial/tutorial-4.rst:198
msgid ""
"But what about mobile? In :doc:`Tutorial 5 <tutorial-5/index>`, we'll "
"convert our application into a mobile application, and deploy it onto a "
"device simulator, and onto a phone."
msgstr ""

