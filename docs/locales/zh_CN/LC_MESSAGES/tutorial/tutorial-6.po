# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013, Russell Keith-Magee
# This file is distributed under the same license as the BeeWare package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: BeeWare 0.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-26 20:12+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../tutorial/tutorial-6.rst:3
msgid "Tutorial 6 - Get this (third)-party started"
msgstr ""

#: ../../tutorial/tutorial-6.rst:5
msgid ""
"So far, the app we've built has only used our own code, plus the code "
"provided by BeeWare. However, in a real-world app, you'll likely want to "
"use a third-party library, downloaded from the Python Package Index "
"(PyPI)."
msgstr ""

#: ../../tutorial/tutorial-6.rst:9
msgid "Let's modify our app to include a third-party library."
msgstr ""

#: ../../tutorial/tutorial-6.rst:12
msgid "Accessing an API"
msgstr ""

#: ../../tutorial/tutorial-6.rst:14
msgid ""
"A common task an app will need to perform is to make a request on a web "
"API to retrieve data, and display that data to the user. This is a toy "
"app, so we don't have a *real* API to work with, so we'll use the `{JSON}"
" Placeholder API <https://jsonplaceholder.typicode.com>`__ as a source of"
" data."
msgstr ""

#: ../../tutorial/tutorial-6.rst:19
msgid ""
"{JSON} Placeholder API has a number of \"fake\" API endpoints you can use"
" as test data. One of those APIs is the ``/posts/`` endpoint, which "
"returns fake blog posts. If you open "
"``https://jsonplaceholder.typicode.com/posts/42`` in your browser, you'll"
" get a JSON payload describing a single post - some `Lorum ipsum "
"<https://en.wikipedia.org/wiki/Lorem_ipsum>`__ content for a blog post "
"with ID 42."
msgstr ""

#: ../../tutorial/tutorial-6.rst:25
msgid ""
"The Python standard library contains all the tools you'd need to access "
"an API. However, the built-in APIs are very low level. They are good "
"implementations of the HTTP protocol - but they require the user to "
"manage lots of low-level details, like URL redirection, sessions, "
"authentication, and payload encoding. As a \"normal browser user\" you're"
" probably used to taking these details for granted, as a browser manages "
"these details for you."
msgstr ""

#: ../../tutorial/tutorial-6.rst:32
msgid ""
"As a result, people have developed third-party libraries that wrap the "
"built-in APIs and provide a simpler API that is a closer match for the "
"everyday browser experience. We're going to use one of those libraries to"
" access the {JSON} Placeholder API - a library called `httpx <https://www"
".python-httpx.org>`__."
msgstr ""

#: ../../tutorial/tutorial-6.rst:37
msgid ""
"Let's add a ``httpx`` API call to our app. Add an import to the top of "
"the ``app.py`` to import ``httpx``::"
msgstr ""

#: ../../tutorial/tutorial-6.rst:42
msgid "Then modify the ``say_hello()`` callback so it looks like this::"
msgstr ""

#: ../../tutorial/tutorial-6.rst:60
msgid ""
"This will change the ``say_hello()`` callback so that when it is invoked,"
" it will:"
msgstr ""

#: ../../tutorial/tutorial-6.rst:63
msgid "make a GET request on the JSON placeholder API to obtain post 42;"
msgstr ""

#: ../../tutorial/tutorial-6.rst:65
msgid "decode the response as JSON;"
msgstr ""

#: ../../tutorial/tutorial-6.rst:67
msgid "extract the body of the post; and"
msgstr ""

#: ../../tutorial/tutorial-6.rst:69
msgid "include the body of that post as the text of the dialog."
msgstr ""

#: ../../tutorial/tutorial-6.rst:71
msgid ""
"Lets run our updated app in Briefcase developer mode to check that our "
"change has worked."
msgstr ""

#: ../../tutorial/tutorial-6.rst:76 ../../tutorial/tutorial-6.rst:142
#: ../../tutorial/tutorial-6.rst:191 ../../tutorial/tutorial-6.rst:402
msgid "macOS"
msgstr ""

#: ../../tutorial/tutorial-6.rst:96 ../../tutorial/tutorial-6.rst:155
#: ../../tutorial/tutorial-6.rst:227 ../../tutorial/tutorial-6.rst:420
msgid "Linux"
msgstr ""

#: ../../tutorial/tutorial-6.rst:116 ../../tutorial/tutorial-6.rst:168
#: ../../tutorial/tutorial-6.rst:273 ../../tutorial/tutorial-6.rst:438
msgid "Windows"
msgstr ""

#: ../../tutorial/tutorial-6.rst:136
msgid ""
"What happened? We've added ``httpx`` to our *code*, but we haven't added "
"it to our development virtual environment. We can fix this by installing "
"``httpx`` with ``pip``, and then re-running ``briefcase dev``:"
msgstr ""

#: ../../tutorial/tutorial-6.rst:149 ../../tutorial/tutorial-6.rst:162
#: ../../tutorial/tutorial-6.rst:175
msgid ""
"When you enter a name and press the button, you should see a dialog that "
"looks something like:"
msgstr ""

#: ../../tutorial/tutorial-6.rst
msgid "Hello World Tutorial 6 dialog, on macOS"
msgstr ""

#: ../../tutorial/tutorial-6.rst
msgid "Hello World Tutorial 6 dialog, on Linux"
msgstr ""

#: ../../tutorial/tutorial-6.rst
msgid "Hello World Tutorial 6 dialog, on Windows"
msgstr ""

#: ../../tutorial/tutorial-6.rst:181
msgid ""
"We've now got a working app, using a third party library, running in "
"development mode!"
msgstr ""

#: ../../tutorial/tutorial-6.rst:184
msgid "Running the updated app"
msgstr ""

#: ../../tutorial/tutorial-6.rst:186
msgid ""
"Let's get this updated application code packaged as a standalone app. "
"Since we've made code changes, we need to follow the same steps as in "
"Tutorial 4:"
msgstr ""

#: ../../tutorial/tutorial-6.rst:193 ../../tutorial/tutorial-6.rst:231
#: ../../tutorial/tutorial-6.rst:277
msgid "Update the code in the packaged app:"
msgstr ""

#: ../../tutorial/tutorial-6.rst:204 ../../tutorial/tutorial-6.rst:242
#: ../../tutorial/tutorial-6.rst:286
msgid "Rebuild the app:"
msgstr ""

#: ../../tutorial/tutorial-6.rst:214 ../../tutorial/tutorial-6.rst:252
#: ../../tutorial/tutorial-6.rst:294
msgid "And finally, run the app:"
msgstr ""

#: ../../tutorial/tutorial-6.rst:222
msgid "However, when the app runs, you'll see a crash dialog:"
msgstr ""

#: ../../tutorial/tutorial-6.rst
msgid "Hello World Tutorial 6 app crash, on macOS"
msgstr ""

#: ../../tutorial/tutorial-6.rst:279
msgid "(beeware-venv)C:\\...>briefcase update"
msgstr ""

#: ../../tutorial/tutorial-6.rst:281
msgid "[hello-world] Updating application code... Installing src/hello_world..."
msgstr ""

#: ../../tutorial/tutorial-6.rst:284
msgid "[hello-world] Application updated."
msgstr ""

#: ../../tutorial/tutorial-6.rst:304
msgid ""
"Once again, the app has failed to start because ``httpx`` has been "
"installed - but why? Haven't we already installed ``httpx``?"
msgstr ""

#: ../../tutorial/tutorial-6.rst:307
msgid ""
"We have - but only in the development environment. Your development "
"environment is entirely local to your machine - and is only enabled when "
"you explicitly activate it. Although Briefcase has a development mode, "
"the main reason you'd use Briefcase is to package up your code so you can"
" give it to someone else."
msgstr ""

#: ../../tutorial/tutorial-6.rst:312
msgid ""
"The only way to guarantee that someone else will have a Python "
"environment that contains everything it needs is to build a completely "
"isolated Python environment. This means there's a completely isolated "
"Python install, and a completely isolated set of dependencies. This is "
"what Briefcase is building when you run ``briefcase build`` - an isolated"
" Python environment. This also explains why ``httpx`` isn't installed - "
"it has been installed in the your *development* environment, but not in "
"the packaged app."
msgstr ""

#: ../../tutorial/tutorial-6.rst:320
msgid "So - we need to tell Briefcase that our app has an external dependency."
msgstr ""

#: ../../tutorial/tutorial-6.rst:323
msgid "Updating dependencies"
msgstr ""

#: ../../tutorial/tutorial-6.rst:325
msgid ""
"In the root directory of your app, there is a file named "
"``pyproject.toml``. This file contains all the app configuration details "
"that you provided when you originally ran ``briefcase new``."
msgstr ""

#: ../../tutorial/tutorial-6.rst:329
msgid ""
"``pyproject.toml`` is broken up into sections; one of the sections "
"describes the settings for your app::"
msgstr ""

#: ../../tutorial/tutorial-6.rst:339
msgid ""
"The ``requires`` option describes the dependencies of our application. It"
" is a list of strings, specifying libraries (and, optionally, versions) "
"of libraries that you want to be included with your app."
msgstr ""

#: ../../tutorial/tutorial-6.rst:343
msgid "Modify the ``requires`` setting so that it reads::"
msgstr ""

#: ../../tutorial/tutorial-6.rst:349
msgid ""
"By adding this setting, we're telling Briefcase \"when you build my app, "
"run ``pip install httpx`` into the application bundle\". Anything that "
"would be legal input to ``pip install`` can be used here - so, you could "
"specify:"
msgstr ""

#: ../../tutorial/tutorial-6.rst:353
msgid "A specific library version (e.g., ``\"httpx==0.19.0\"``);"
msgstr ""

#: ../../tutorial/tutorial-6.rst:354
msgid "A range of library versions (e.g., ``\"httpx>=0.19\"``);"
msgstr ""

#: ../../tutorial/tutorial-6.rst:355
msgid ""
"A path to a git repository (e.g., "
"``\"git+https://github.com/encode/httpx\"``); or"
msgstr ""

#: ../../tutorial/tutorial-6.rst:357
msgid ""
"A local file path (However - be warned: if you give your code to someone "
"else, this path probably won't exist on their machine!)"
msgstr ""

#: ../../tutorial/tutorial-6.rst:360
msgid ""
"Further down in ``pyproject.toml``, you'll notice other sections that are"
" operating system dependent, like ``[tool.briefcase.app.hello-"
"world.macOS]`` and ``[tool.briefcase.app.hello-world.windows]``. These "
"sections *also* have a ``requires`` setting. These settings allow you to "
"define additional platform-specific dependencies - so, for example, if "
"you need a platform-specific library to handle some aspect of your app, "
"you can specify that library in the platform-specific ``requires`` "
"section, and that setting will only be used for that platform. You will "
"notice that the ``toga`` libraries are all specified in the platform-"
"specific ``requires`` section - this is because the libraries needed to "
"display a user interface are platform specific."
msgstr ""

#: ../../tutorial/tutorial-6.rst:371
msgid ""
"In our case, we want ``httpx`` to be installed on all platforms, so we "
"use the app-level ``requires`` setting. The app-level dependencies will "
"always be installed; the platform-specific dependecies are installed *in "
"addition* to the app-level ones."
msgstr ""

#: ../../tutorial/tutorial-6.rst:376
msgid "Python only on mobile (for now!)"
msgstr ""

#: ../../tutorial/tutorial-6.rst:378
msgid ""
"On desktop platforms (macOS, Windows, Linux), any ``pip``-installable can"
" be added to your requirements. On mobile platforms, your options are a "
"little more limited - you can only use *pure Python* packages i.e., "
"packages that do *not* contain a binary module."
msgstr ""

#: ../../tutorial/tutorial-6.rst:383
msgid ""
"This means that libraries like ``numpy``, ``scikit-learn``, or "
"``cryptography`` can be used in a *desktop* app, but not a *mobile* app. "
"This is primarily because mobile apps require binary modules that are "
"compiled for multiple platforms, which is difficult to set up."
msgstr ""

#: ../../tutorial/tutorial-6.rst:388
msgid ""
"It's *possible* to build a mobile Python app that uses binary modules, "
"but it's not easy to set up -- well outside the scope of an introductory "
"tutorial like this one. This is an area that we'd like to address - but "
"it's not a simple task. If you'd like to see this added to BeeWare, "
"please consider `supporting the project by becoming a member "
"<http://beeware.org/bee/join/>`_."
msgstr ""

#: ../../tutorial/tutorial-6.rst:395
msgid ""
"Now that we've told Briefcase about our additional dependencies, we can "
"try packaging our app again. Ensure that you've saved your changes to "
"``pyproject.toml``, and then update your app again - this time, passing "
"in the ``-d`` flag. This tells Briefcase to update dependencies in the "
"packaged app:"
msgstr ""

#: ../../tutorial/tutorial-6.rst:456
msgid ""
"Once you've updated, you can run ``briefcase build`` and ``briefcase "
"run`` - and you should see your packaged app, with the new dialog "
"behavior."
msgstr ""

#: ../../tutorial/tutorial-6.rst:461
msgid "Next steps"
msgstr ""

#: ../../tutorial/tutorial-6.rst:463
msgid ""
"We've now got an app that uses a third-party library! However, you may "
"have noticed that when you press the button, the app becomes a little "
"unresponsive. Can we do anything to fix this? Turn to :doc:`Tutorial 7 "
"<tutorial-7>` to find out..."
msgstr ""

